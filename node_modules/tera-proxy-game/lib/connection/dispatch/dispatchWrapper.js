"use strict";

class DispatchWrapper {
  constructor(base, moduleName) {
    this.base = base;
    this.moduleName = moduleName;
  }

  load(name, from, required = true, ...args) {
    const mod = this.base.load(name, from, ...args);
    if (required && !mod) {
      throw new Error(`Cannot find module '${name}'`);
    }
    return mod;
  }

  unload(...args) {
    return this.base.unload(...args);
  }

  hook(...args) {
    const hook = this.base.hook(...args);
    hook.moduleName = this.moduleName;
    return hook;
  }

  hookOnce(...args) {
    const cb = args.pop();
    if (typeof cb !== 'function') {
      throw new Error('last argument not a function');
    }

    const base = this.base,
          hook = base.hook(...args, function(...hookArgs) {
            base.unhook(hook);
            return cb.apply(this, ...hookArgs);
          });

    return hook;
  }

  unhook(...args) {
    return this.base.unhook(...args);
  }

  toClient(...args) {
    return this.base.write(false, ...args);
  }

  toServer(...args) {
    return this.base.write(true, ...args);
  }
  
  send(name, version, data) {
    if(typeof name !== 'string')
      throw Error('Raw send() is not supported');
        
    switch(name[0]) {
      case 'S':
      case 'I':
        return this.base.write(false, name, version, data);
        break;
      case 'C':
        return this.base.write(true, name, version, data);
        break;
      default:
        throw new Error(`Unknown packet direction: ${name}`);
    }
  }

  parseSystemMessage(...args) {
    return this.base.parseSystemMessage(...args);
  }

  buildSystemMessage(...args) {
    return this.base.buildSystemMessage(...args);
  }
}

module.exports = DispatchWrapper;
