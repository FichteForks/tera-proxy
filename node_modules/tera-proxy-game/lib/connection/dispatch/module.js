"use strict";

class Module {
  constructor(dispatch, name) {
    this.dispatch = dispatch;
    this.name = name;
  }

  load(name, from, required = true, ...args) {
    const mod = this.dispatch.load(name, from, ...args);
    if (required && !mod) {
      throw new Error(`Cannot find module '${name}'`);
    }
    return mod;
  }

  unload(...args) {
    return this.dispatch.unload(...args);
  }

  hook(...args) {
    const hook = this.dispatch.hook(...args);
    hook.moduleName = this.name;
    return hook;
  }

  hookOnce(...args) {
    const cb = args.pop();
    if (typeof cb !== 'function') {
      throw new Error('last argument not a function');
    }

    const dispatch = this.dispatch,
          hook = dispatch.hook(...args, function() {
            dispatch.unhook(hook);
            return cb.apply(this, arguments);
          });

    return hook;
  }

  unhook(...args) {
    return this.dispatch.unhook(...args);
  }

  toClient(...args) {
    return this.dispatch.write(false, ...args);
  }

  toServer(...args) {
    return this.dispatch.write(true, ...args);
  }
  
  send(name, version, data) {
    if(typeof name !== 'string')
      throw Error('Raw send() is not supported');
        
    switch(name[0]) {
      case 'S':
      case 'I':
        return this.dispatch.write(false, name, version, data);
        break;
      case 'C':
        return this.dispatch.write(true, name, version, data);
        break;
      default:
        throw new Error(`Unknown packet direction: ${name}`);
    }
  }

  parseSystemMessage(...args) {
    return this.dispatch.parseSystemMessage(...args);
  }

  buildSystemMessage(...args) {
    return this.dispatch.buildSystemMessage(...args);
  }
  
  get moduleName() {
    // TODO: this will warn soon
    //console.log(`WARNING FOR DEVELOPERS: In ${this.name}: 'moduleName' is deprecated, use 'name' instead!`);
    return this.name;
  }
  
  get base() {
    // TODO: this will warn soon
    //console.log(`WARNING FOR DEVELOPERS: In ${this.name}: 'base' is deprecated and it is generally discouraged to directly access it! If absolutely necessary, use 'dispatch' instead!`);
    return this.dispatch;
  }
  
  get proxyAuthor() { return this.dispatch.proxyAuthor; }
  get region() { return this.dispatch.region; }
  get majorPatchVersion() { return this.dispatch.majorPatchVersion; }
  get minorPatchVersion() { return this.dispatch.minorPatchVersion; }
  get protocolVersion() { return this.dispatch.protocolVersion; }
  get isConsole() { return this.dispatch.isConsole(); }
  get connection() { return this.dispatch.connection; }
}

module.exports = Module;
